    function createModelView_text(modelPath, index) {
        const modelDiv = document.createElement('div');
        modelDiv.className = 'item render_wrapper';
        
        // Create and append Model Viewer
        const modelViewerDiv = document.createElement('div');
        modelViewerDiv.className = 'render_wrapper';
        const modelViewer = document.createElement('model-viewer');
        // ... set modelViewer properties ...
        modelViewer.src = "./text_models/" + modelPath + ".glb";
        modelViewer.alt = 'Description of model';
        modelViewer.setAttribute('auto-rotate', '');
        modelViewer.setAttribute('camera-controls', '');
        modelViewer.style.width = '100%';
        modelViewer.style.height = '100%';
        modelViewer.style.backgroundColor = 'transparent';
        modelViewer.setAttribute('camera-orbit', '50deg 75deg 3m');

        const radioButtons = createRadioButtons_uncondition('display-option-' + index);
        const updateColors = () => {
            radioButtons.forEach(rb => {
                rb.querySelector('span').style.color = rb.querySelector('input').checked ? 'green' : 'blue';
                rb.querySelector('span').style.opacity = rb.querySelector('input').checked ? 1 : 0.2;
            });
        };

        
        radioButtons.forEach(radioButton => {
            radioButton.querySelector('input').addEventListener('change', updateColors);
        });
        updateColors();

        let originalTexture = null;
        modelViewer.addEventListener('load', function() {
            const material = modelViewer.model.materials[0];
            originalTexture = material.pbrMetallicRoughness.baseColorTexture.texture;
        });

        radioButtons[0].querySelector('input').addEventListener('change', function() {
            const material = modelViewer.model.materials[0];
            const texture = material.pbrMetallicRoughness.baseColorTexture.texture;
            if (this.checked) {
                const material = modelViewer.model.materials[0];
                material.pbrMetallicRoughness.baseColorTexture.setTexture(originalTexture);
                modelViewer.style.display = "block";
            }
        });
        radioButtons[1].querySelector('input').addEventListener('change', function() {
            const material = modelViewer.model.materials[0];
            const texture = material.pbrMetallicRoughness.baseColorTexture.texture;
            if (this.checked) {
                const material = modelViewer.model.materials[0];
                material.pbrMetallicRoughness.baseColorTexture.setTexture(null);
                modelViewer.style.display = "block";

            }
        });

        const controlsDiv = document.createElement('div');
        controlsDiv.className = 'controls';
        radioButtons.forEach(radioButton => controlsDiv.appendChild(radioButton));

        const dialogBox = document.createElement('div');
        dialogBox.className = 'dialog-box';
        dialogBox.style.position = 'absolute'; 
        dialogBox.style.display = 'none'; 
        dialogBox.style.top = '30px';  
        dialogBox.style.right = '0';
        
        const descriptionCheckbox = document.createElement('input');
        descriptionCheckbox.type = 'checkbox';
        descriptionCheckbox.id = 'descriptionCheckbox-' + index;
        descriptionCheckbox.style.opacity = "0";

        const descriptionLabel = document.createElement('label'); 
        descriptionLabel.htmlFor = descriptionCheckbox.id; 

        const span = document.createElement('span');
        span.innerHTML = 'Show Description';
        span.style.position = 'relative';
        span.style.top = '-7px';
        span.style.marginLeft='10px';
        span.style.whiteSpace = 'nowrap';

        descriptionLabel.appendChild(span);


        const descriptionText = "this is a test this is a test this is a test this is a test this is a test"; // 

        descriptionCheckbox.addEventListener('change', function() {
            if (this.checked) {
                // dialogBox.innerHTML = descriptionText;
                // dialogBox.style.display = 'block';
                
                fetch("./text/" + modelPath + ".txt")
                    .then(response => response.text())
                    .then(text => {
                        dialogBox.innerHTML = text;
                        dialogBox.style.display = 'block';
                    })
                    .catch(error => console.error(error));
            } else {
                dialogBox.style.display = 'none';
            }
        });

        const checkboxWrapper = document.createElement('div');
        checkboxWrapper.style.position = 'relative'; 
        checkboxWrapper.appendChild(descriptionCheckbox);
        checkboxWrapper.appendChild(dialogBox);
        checkboxWrapper.appendChild(descriptionLabel);
        controlsDiv.appendChild(checkboxWrapper); 

        modelDiv.appendChild(controlsDiv);

        modelDiv.appendChild(modelViewer); // Append model viewer first
        modelDiv.appendChild(modelViewerDiv);

        return modelDiv;
    }

    function createCarousel(modelPaths, resultsCarouselId, createModelViewFunction) {
        const resultsCarousel = document.getElementById(resultsCarouselId);

        modelPaths.forEach((modelPath, index) => {
        const uniqueId = resultsCarouselId + '-model-' + index;
        const modelDiv = createModelViewFunction(modelPath, uniqueId);
        resultsCarousel.appendChild(modelDiv);
        });
    }

</script>
